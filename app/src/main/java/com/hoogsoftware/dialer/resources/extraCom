





//    fun getCallHistoryOfSim(simInfo:SubscriptionInfo?
//                            , allCallList:MutableList<CallHistory> ) : MutableList<CallHistory> {
//
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1){
//            return allCallList.filter { it.subscriberId==simInfo?.subscriptionId.toString() || it.subscriberId!!.contains(simInfo?.iccId?:"_")}.toMutableList()
//        }else{
//            throw Exception("This Feature Is Not Available On This Device")
//        }
//
//    }

//    @RequiresApi(Build.VERSION_CODES.P)
//    private fun getSimCardInfos() : List<SubscriptionInfo>?{
//        val subscriptionManager: SubscriptionManager =
//            getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE) as SubscriptionManager
//        if (ActivityCompat.checkSelfPermission(
//                this,
//                Manifest.permission.READ_PHONE_STATE
//            ) != PackageManager.PERMISSION_GRANTED
//        ) {
//            throw Exception("Permission Not Granted -> Manifest.permission.READ_PHONE_STATE")
//        }
//        Log.d(TAG, "getSimCardInfos: ${subscriptionManager.accessibleSubscriptionInfoList}")
//        return subscriptionManager.activeSubscriptionInfoList
//    }


//    val deviceName: String
//        get() {
//            val manufacturer = Build.MANUFACTURER
//            val model = Build.MODEL
//            return if (model.startsWith(manufacturer)) {
//                capitalize(model)
//            } else {
//                capitalize(manufacturer) + " " + model
//            }
//        }
//    private fun capitalize(s: String?): String {
//        if (s == null || s.length == 0) {
//            return ""
//        }
//        val first = s[0]
//        return if (Character.isUpperCase(first)) {
//            s
//        } else {
//            first.uppercaseChar().toString() + s.substring(1)
//        }
//    }
//    companion object {
//     //   private const val TAG_SEND_DATA = "Sending data to server"
//       // private const val PERMISSIONS_REQUEST_CODE = 999
//    }


   // @SuppressLint("Range")
//    fun getAllCallHistory() : MutableList<CallHistory>{
//
//        val managedCursor = if (ActivityCompat.checkSelfPermission(
//                this,
//                Manifest.permission.READ_CALL_LOG
//            ) != PackageManager.PERMISSION_GRANTED
//        ) {
//            throw Exception("Permission Not Granted -> Manifest.permission.READ_CALL_LOG")
//        }else{
//            this.contentResolver?.query(
//                CallLog.Calls.CONTENT_URI, null, null,
//                null, null)
//        }
//
//        managedCursor?.let {
//            val callHistoryList= mutableListOf<CallHistory>()
//            while (it.moveToNext())
//            {
//                if (it.getString(it.getColumnIndex(CallLog.Calls.PHONE_ACCOUNT_ID))==null) continue
//                Log.d(TAG, "getAllCallHistory: ${it.getString(it.getColumnIndex(CallLog.Calls.PHONE_ACCOUNT_ID))}")
//                callHistoryList.add(CallHistory(number = it.getString(it.getColumnIndex(CallLog.Calls.NUMBER)),
//                    name = it.getString(it.getColumnIndex(CallLog.Calls.CACHED_NAME))?:null,
//                    type = it.getString(it.getColumnIndex(CallLog.Calls.TYPE)).toInt(),
//                    date = it.getString(it.getColumnIndex(CallLog.Calls.DATE)).toLong(),
//                    duration = it.getString(it.getColumnIndex(CallLog.Calls.DURATION)).toLong(),
//
//                    subscriberId = it.getString(it.getColumnIndex(CallLog.Calls.PHONE_ACCOUNT_ID)))
//                     //   subscriberId ="89918720400291790994")
//                )
//            }
//            it.close()
//            return callHistoryList
//        }
//
//        return mutableListOf<CallHistory>()
//
//    }
  //  var viewModel=ViewModelSaveToken()
//    fun getTIME(){
//        val pref=Cache(this)
//        pref.authToken.asLiveData().observe(this, Observer {
//
//            if (it==null){
//                timer=currentTimeMillis();
//               //viewModel.saveAuthToken(timer)
//
//            }
//            else{
//                timer=it
//            }
//        })
//    }


//    val userDataChangeReceiver = object: BroadcastReceiver() {
//        override fun onReceive(context: Context?, intent: Intent?) {
//            Log.d(TAG, "onReceive11: 11")
//        }
//    }





//
//    lateinit var dexter : DexterBuilder
//    private fun getPermission() {
//        dexter = Dexter.withContext(this)
//            .withPermissions(
//                Manifest.permission.READ_CALL_LOG,
//                android.Manifest.permission.READ_PHONE_STATE,Manifest.permission.READ_SMS,Manifest.permission.PROCESS_OUTGOING_CALLS
//            ).withListener(object : MultiplePermissionsListener {
//                override fun onPermissionsChecked(report: MultiplePermissionsReport) {
//                    report.let {
//
//                        if (report.areAllPermissionsGranted()) {
//
//                            Toast.makeText(this@Third, "Permissions Granted", Toast.LENGTH_SHORT).show()
//                            FetchCallLogs()
//                            FetchCallLogs()
//                        } else {
//                            AlertDialog.Builder(this@Third, R.style.Theme_Dialer).apply {
//                                setMessage("please allow the required permissions")
//                                    .setCancelable(false)
//                                    .setPositiveButton("Settings") { _, _ ->
//                                        val reqIntent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
//                                            .apply {
//                                                val uri = Uri.fromParts("package", packageName, null)
//                                                data = uri
//                                            }
//                                        resultLauncher.launch(reqIntent)
//                                    }
//                                // setNegativeButton(R.string.cancel) { dialog, _ -> dialog.cancel() }
//                                val alert = this.create()
//                                alert.show()
//                            }
//                        }
//                    }
//                }
//                override fun onPermissionRationaleShouldBeShown(permissions: List<PermissionRequest?>?, token: PermissionToken?) {
//                    token?.continuePermissionRequest()
//                }
//            }).withErrorListener{
//                Toast.makeText(this, it.name, Toast.LENGTH_SHORT).show()
//            }
//        dexter.check()
//    }
//    private var resultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
//            result -> dexter.check()
//    }
//    fun addDummyUser() {
//        val apiService = RestApiSerVice()
//        val userInfo = CallInfo( userId = null,
//            userName = "Alex",
//            userEmail = "alex@gmail.com",
//            userAge = 32.toString(),
//            userUid = "164E92FC-D37A-4946-81CB-29DE7EE4B124" )
//
//        apiService.addUser(userInfo) {
//            if (it?.userId != null) {
//                // it = newly added user parsed as response
//                // it?.id = newly added user ID
//            } else {
//                //Timber.d("Error registering new user")
//            }
//        }
//    }



//    @RequiresPermission(allOf = [
//        Manifest.permission.READ_CALL_LOG,
//        Manifest.permission.READ_PHONE_STATE,
//        Manifest.permission.PROCESS_OUTGOING_CALLS
//    ])
//    fun Intent.phoneCallInformation(): PhoneCall {
//        val action = action
//        val extras = extras
//        if (extras != null) {
//            if (action.equals(TelephonyManager.ACTION_PHONE_STATE_CHANGED)) {
//                // Incoming Call
//                val state = getStringExtra(TelephonyManager.EXTRA_STATE)!!
//                if (hasExtra(TelephonyManager.EXTRA_INCOMING_NUMBER) && state == TelephonyManager.EXTRA_STATE_RINGING) {
//                    val number = getStringExtra(TelephonyManager.EXTRA_INCOMING_NUMBER)!!
//
//                    return PhoneCall.Incoming(state, number)
//                }
//            } else if (action.equals(Intent.ACTION_NEW_OUTGOING_CALL)) {
//                val number = getStringExtra(Intent.EXTRA_PHONE_NUMBER)
//                return PhoneCall.Outgoing(number)
//            }
//        }
//        return PhoneCall.Unknown
//    }
  //  val CHANNEL_ID = "autoStartServiceChannel"
  //  val CHANNEL_NAME = "Auto Start Service Channel"

//    private fun createNotificationChannel() {
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//            val serviceChannel = NotificationChannel(
//                CHANNEL_ID,
//                CHANNEL_NAME,
//                NotificationManager.IMPORTANCE_DEFAULT
//            )
//            val manager = getSystemService(
//                NotificationManager::class.java
//            )
//            manager.createNotificationChannel(serviceChannel)
//        }
//    }


//    fun startService(v: View?) {
//        val serviceIntent = Intent(this, Mess::class.java)
//        serviceIntent.putExtra("inputExtra", "passing any text")
//        ContextCompat.startForegroundService(this, serviceIntent)
//    }
//
//    fun stopService(v: View?) {
//        val serviceIntent = Intent(this, Mess::class.java)
//        stopService(serviceIntent)
//    }


//    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
//        super.onActivityResult(requestCode, resultCode, data)
//        if (REQUEST_CODE == requestCode) {
//            val intent = Intent(this@Third, TService::class.java)
//            startService(intent)
//        }
//    }














//    private fun getFormatedDateTime(
//        dateStr: String,
//        strInputFormat: String,
//        strOutputFormat: String
//    ): String {
//        var formattedDate = dateStr
//        val inputFormat: DateFormat = SimpleDateFormat(strInputFormat, Locale.getDefault())
//        val outputFormat: DateFormat = SimpleDateFormat(strOutputFormat, Locale.getDefault())
//        var date: Date? = null
//        try {
//            date = inputFormat.parse(dateStr)
//        } catch (e: ParseException) {
//        }
//        if (date != null) {
//            formattedDate = outputFormat.format(date)
//        }
//        return formattedDate
//    }




















//    private fun doBan() {
//        val builder = AlertDialog.Builder(this)
//        builder.setTitle("Name")
////89918720400291790994
//
//        // set the custom layout
//        val customLayout: View = layoutInflater.inflate(R.layout.alert, null)
//        builder.setView(customLayout)
//        val textView=customLayout.findViewById<TextView>(R.id.sim1)
//        val textView2=customLayout.findViewById<TextView>(R.id.sim2)
//        val dialog = builder.create()
//         dialog.show()
//        textView.setOnClickListener {
//            flag=1
//            dialog.dismiss()
//
//
//        }
//        textView2.setOnClickListener {
//            val dialog = builder.create()
//            dialog.dismiss()
//            flag=2
//        }
//    }


  //  @RequiresApi(Build.VERSION_CODES.P)
//    override fun onCreate(savedInstanceState: Bundle?) {
//        super.onCreate(savedInstanceState)
//        setContentView(R.layout.activity_main)
//
//        supportActionBar!!.title = "Call Logs"
     //   createNotificationChannel()

       // Init()
        //getPermission()
      //  reciver = CallBroadcastReceiver()
//        IntentFilter(Intent.ACTION_NEW_OUTGOING_CALL).also {
//            registerReceiver(reciver,it)
//
//        }
//        if (ActivityCompat.checkSelfPermission(
//                this,
//                Manifest.permission.READ_CALL_LOG
//            ) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(
//                this,
//                Manifest.permission.PROCESS_OUTGOING_CALLS
//            ) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(
//                this,
//                Manifest.permission.READ_PHONE_STATE
//            ) != PackageManager.PERMISSION_GRANTED
//        ) {
//            // TODO: Consider calling
//            //    ActivityCompat#requestPermissions
//            // here to request the missing permissions, and then overriding
//            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
//            //                                          int[] grantResults)
//            // to handle the case where the user grants the permission. See the documentation
//            // for ActivityCompat#requestPermissions for more details.
//            return
//        }
     //   intent.phoneCallInformation()

//        registerReceiver(userDataChangeReceiver,
//            IntentFilter("TEST")
//        )
        //doBan()
       // FetchCallLogs()



//        for(log in getCallHistoryOfSim( getSimCardInfos()?.get(0),getAllCallHistory()) )
//        {
//            Log.d("Sim1LogDetails", "$log\n____________________________________")
//        }

//        for(log in getCallHistoryOfSim( this.getSimCardInfos()?.get(1),getAllCallHistory()) )
//        {
//            Log.d("Sim2LogDetails", "$log\n____________________________________")
//
//        }
//        saveData()
//        loadData()
  //  }


















//    class DeviceAdminDemo : DeviceAdminReceiver() {
//          @Override fun onReceive(context: Context?, intent: Intent?) {
//            super.onReceive(context!!, intent!!)
//        }
//
//         fun onEnabled(context: Context?, intent: Intent?) {}
//          fun onDisabled(context: Context?, intent: Intent?) {}
//    }


//    class TService : Service() {
//        var recorder: MediaRecorder? = null
//        var audiofile: File? = null
//        var name: String? = null
//        var phonenumber: String? = null
//        var audio_format: String? = null
//        var Audio_Type: String? = null
//        var audioSource = 0
//        var context: Context? = null
//        private val handler: Handler? = null
//        var timer: Timer? = null
//      //  var offHook = false
//        var ringing = false
//        var toast: Toast? = null
//        var isOffHook = false
//        private var recordstarted = false
//        private var br_call: CallBr? = null
//        override fun onBind(arg0: Intent?): IBinder? {
//            // TODO Auto-generated method stub
//            return null
//        }
//
//        override fun onDestroy() {
//            Log.d("service", "destroy")
//            super.onDestroy()
//        }
//
//        override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
//            // final String terminate =(String)
//            // intent.getExtras().get("terminate");//
//            // intent.getStringExtra("terminate");
//            // Log.d("TAG", "service started");
//            //
//            // TelephonyManager telephony = (TelephonyManager)
//            // getSystemService(Context.TELEPHONY_SERVICE); // TelephonyManager
//            // // object
//            // CustomPhoneStateListener customPhoneListener = new
//            // CustomPhoneStateListener();
//            // telephony.listen(customPhoneListener,
//            // PhoneStateListener.LISTEN_CALL_STATE);
//            // context = getApplicationContext();
//            val filter = IntentFilter()
//            filter.addAction(ACTION_OUT)
//            filter.addAction(ACTION_IN)
//            br_call = CallBr()
//            registerReceiver(br_call, filter)
//
//
//            // if(terminate != null) {
//            // stopSelf();
//            // }
//            return START_NOT_STICKY
//        }
//
//        inner class CallBr : BroadcastReceiver() {
//            var bundle: Bundle? = null
//            var state: String? = null
//            var inCall: String? = null
//            var outCall: String? = null
//            var wasRinging = false
//            override fun onReceive(context: Context?, intent: Intent) {
//                if (intent.action == ACTION_IN) {
//                    if (intent.extras.also { bundle = it } != null) {
//                        state = bundle!!.getString(TelephonyManager.EXTRA_STATE)
//                        if (state == TelephonyManager.EXTRA_STATE_RINGING) {
//                            inCall = bundle!!.getString(TelephonyManager.EXTRA_INCOMING_NUMBER)
//                            wasRinging = true
//                            Toast.makeText(context, "IN : $inCall", Toast.LENGTH_LONG).show()
//                        } else if (state == TelephonyManager.EXTRA_STATE_OFFHOOK) {
//                            if (wasRinging == true) {
//                                Toast.makeText(context, "ANSWERED", Toast.LENGTH_LONG).show()
//                                val out = SimpleDateFormat("dd-MM-yyyy hh-mm-ss").format(Date())
//                                val sampleDir = File(
//                                    Environment.getExternalStorageDirectory(),
//                                    "/TestRecordingDasa1"
//                                )
//                                if (!sampleDir.exists()) {
//                                    sampleDir.mkdirs()
//                                }
//                                val file_name = "Record"
//                                try {
//                                    audiofile = File.createTempFile(file_name, ".amr", sampleDir)
//                                } catch (e: IOException) {
//                                    e.printStackTrace()
//                                }
//                                val path: String =
//                                    Environment.getExternalStorageDirectory().getAbsolutePath()
//                                recorder = MediaRecorder()
//                                //                          recorder.setAudioSource(MediaRecorder.AudioSource.VOICE_CALL);
//                                recorder!!.setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION)
//                                recorder!!.setOutputFormat(MediaRecorder.OutputFormat.AMR_NB)
//                                recorder!!.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)
//                                recorder!!.setOutputFile(audiofile!!.getAbsolutePath())
//                                try {
//                                    recorder!!.prepare()
//                                } catch (e: IllegalStateException) {
//                                    e.printStackTrace()
//                                } catch (e: IOException) {
//                                    e.printStackTrace()
//                                }
//                                recorder!!.start()
//                                recordstarted = true
//                            }
//                        } else if (state == TelephonyManager.EXTRA_STATE_IDLE) {
//                            wasRinging = false
//                            Toast.makeText(context, "REJECT || DISCO", Toast.LENGTH_LONG).show()
//                            if (recordstarted) {
//                                recorder!!.stop()
//                                recordstarted = false
//                            }
//                        }
//                    }
//                } else if (intent.action == ACTION_OUT) {
//                    if (intent.extras.also { bundle = it } != null) {
//                        outCall = intent.getStringExtra(Intent.EXTRA_PHONE_NUMBER)
//                        Toast.makeText(context, "OUT : $outCall", Toast.LENGTH_LONG).show()
//                    }
//                }
//            }
//        }
//
//        companion object {
//            private const val ACTION_IN = "android.intent.action.PHONE_STATE"
//            private const val ACTION_OUT = "android.intent.action.NEW_OUTGOING_CALL"
//        }
//    }




  //  lateinit var reciver : CallBroadcastReceiver

//    fun loadData(){
//        val sharedPreferences: SharedPreferences = this.getSharedPreferences("getTime", Context.MODE_PRIVATE)
//        val saved=sharedPreferences.getString("time",null)
//        Toast.makeText(this, "Well This is $saved", Toast.LENGTH_SHORT).show()
//        Log.d(TAG, "saveData: $saved")
//
//
//    }

//    fun saveData(){
//        val sharedPreferences= this.getSharedPreferences("getTime", Context.MODE_PRIVATE)
//        val edit=sharedPreferences.edit()
//        edit.apply{
//            putString("time", currentTimeMillis().toString())
//            Log.d(TAG, "saveData: ${currentTimeMillis()}")
//        }











    //Done Dexter


//     @SuppressLint("Range")
//    fun getAllCallHistory() : MutableList<CallHistory>{
//
//        val managedCursor = if (ActivityCompat.checkSelfPermission(
//                this,
//                Manifest.permission.READ_CALL_LOG
//            ) != PackageManager.PERMISSION_GRANTED
//        ) {
//            throw Exception("Permission Not Granted -> Manifest.permission.READ_CALL_LOG")
//        }else{
//            this.contentResolver?.query(
//                CallLog.Calls.CONTENT_URI, null, null,
//                null, null)
//        }
//
//        managedCursor?.let {
//            val callHistoryList= mutableListOf<CallHistory>()
//            while (it.moveToNext())
//            {
//            //    if (it.getString(it.getColumnIndex(CallLog.Calls.)))
//                if (it.getString(it.getColumnIndex(CallLog.Calls.PHONE_ACCOUNT_ID))==null) continue
//                Log.d(TAG, "getAllCallHistory: ${it.getString(it.getColumnIndex(CallLog.Calls.PHONE_ACCOUNT_ID))}")
//                callHistoryList.add(CallHistory(number = it.getString(it.getColumnIndex(CallLog.Calls.NUMBER)),
//                    name = it.getString(it.getColumnIndex(CallLog.Calls.CACHED_NAME))?:null,
//                    type = it.getString(it.getColumnIndex(CallLog.Calls.TYPE)).toInt(),
//                    date = it.getString(it.getColumnIndex(CallLog.Calls.DATE)).toLong(),
//                    duration = it.getString(it.getColumnIndex(CallLog.Calls.DURATION)).toLong(),
//
//                    subscriberId = it.getString(it.getColumnIndex(CallLog.Calls.PHONE_ACCOUNT_ID)))
//                     //   subscriberId ="89918720400291790994")
//                )
//            }
//            it.close()
//            return callHistoryList
//        }
//
//        return mutableListOf<CallHistory>()
//
//    }



















            //val cc=cursor.getString(cursor.getColumnIndex(CallLog.Calls.PHONE_ACCOUNT_ID))
               // Log.d(TAG, "getAllCallHistory111:   $cc")
               // Log.d("CallLog1222", "Number: $callNumber, Date: $callDate, Duration: $callDuration, Type: $callType")



//
//                val columnIndex = cursor.getColumnIndex(CallLog.Calls.PHONE_ACCOUNT_ID)
//                Log.d(TAG, "getAllCallHistory: 444  $columnIndex")
//                if (columnIndex == -1) {
//                    // The column does not exist in the cursor
//                    Log.e("Error", "Column not found")
//                } else {
//                    // The column exists in the cursor
//                    val columnValue = cursor.getString(columnIndex)
//                     Log.d("CallLog2", "Number: $callNumber, Date: $callDate, Duration: $callDuration, Type: $callType, Name: $columnValue")
//
//
//                    // Do something with the column value
//                }







//                val simCardId =
//                    cursor.getInt(cursor.getColumnIndex(CallLog.Calls.PHONE_ACCOUNT_ID))
//
//                // Retrieve the SIM card information from the SubscriptionManager
//                val subscriptionManager =
//                    getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE) as SubscriptionManager
//                val subscriptionInfo =
//                    subscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(simCardId)
//                val carrierName = subscriptionInfo?.carrierName
//                val countryIso = subscriptionInfo?.countryIso
//
//                // Log the call details and SIM card information
//                Log.d(
//                    "CallLog",
//                    "Number: $callNumber, SIM Card ID: $simCardId, Carrier: $carrierName, Country: $countryIso"
//                )






                // Do something with the call details
               // Log.d("CallLog", "Number: $callNumber, Date: $callDate, Duration: $callDuration, Type: $callType")








    // Register for incoming call broadcasts
//    val filter = IntentFilter().apply {
//        addAction(Intent.ACTION_NEW_OUTGOING_CALL)
//        addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED)
//    }
//    val receiver = CallBroadcastReceiver()
//
//    registerReceiver(receiver, filter)

//        callRecord = CallRecord.Builder(this)
//            .setLogEnable(true)
//            .setRecordFileName("CallRecorderTestFile")
//            .setRecordDirName("CallRecorderTest")
//            .setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION)
//            .setShowSeed(true)
//            .build()
//        callRecord.startCallReceiver()